@model SINU.Models.vUsuariosAdministrativos
<!-- xxxxxxxxxxxx Debo indicar el TITLE de la pantalla y el MENUPERFIL correspondiente en todas las pantallas xxxxxxxxxxxxxx -->
@{
    ViewBag.Title = "Edicion Usuario Administrativo";
    //creando la lista para la vista Create usa combo de las oficinas de ingreso y delegaciones si es DELEGACION
    ViewBag.OficinaYDelegacion = new SelectList(new SINU.Models.SINUEntities().OficinasYDelegaciones.ToList(), "IdOficinasYDelegaciones", "Nombre");
    ViewBag.CodGrupos = new SelectList(new SINU.Models.SINUEntities().vSeguridad_Grupos.ToList(), "codGrupo", "codGrupo");
    //Esto lo cambie de lugar y lo hago directamente en DownDropListFor, para que en el edit me cargue el combo, pasandole como atributo el valor del selectValue
    //ViewBag.Grado = new SelectList(new SINU.Models.SINUEntities().vParam_Grados.ToList(), "GRADO", "DESCRIPCION", Model.Grado);
}
@*@section MenuPerfil{

    @Html.Partial("_MenuPerfilAdmin")
}*@
<!-- xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  -->
@*prueba de gitignore*@
@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>@ViewBag.Title</h4>
        <h4>@Model.Email</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <!-- escondo con hiddenfor los campos que no voy a cargar pero que hacen a la validacion del modelo
    cuando pregunto ModelState.IsValid en el action del controller-->
        @Html.HiddenFor(model => model.Delegacion)
        @Html.HiddenFor(model => model.Email)
        @Html.HiddenFor(model => model.FechUltimaAct)
        @Html.HiddenFor(model => model.Password)
        @Html.HiddenFor(model => model.ConfirmPassword)

        <div class="form-group">
            @Html.LabelFor(model => model.Nombre, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Nombre, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nombre, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Apellido, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Apellido, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Apellido, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">

            @Html.LabelFor(m => m.codGrupo, new { @class = "col-md-2 control-label" })
            <div class="col-md-4">
                @Html.DropDownListFor(m => m.codGrupo, (SelectList)ViewBag.CodGrupos, "---Seleccione Perfil ---", htmlAttributes: new { @class = "form-control selectpicker", @id = "inaoact" })
            </div>
        </div>


        <!-- Este combo debe aparecer solo si es elegido la opcion DELEGACION en CodGrupo-->
        <div id="SI">
            <div class="form-group">

                @Html.LabelFor(m => m.Delegacion, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.IdOficinasYDelegaciones, (SelectList)ViewBag.OficinaYDelegacion, "---Seleccione la delegacion ---", htmlAttributes: new { @class = "form-control" })
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.mr, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.mr, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.mr, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group" id="drprojecttype">
            @Html.LabelFor(model => model.Grado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                @*@Html.DropDownListFor(m => m.Grado, (SelectList)ViewBag.Grado, htmlAttributes: new { @class = "form-control" })*@
                @Html.DropDownListFor(m => m.Grado, new SelectList(new SINU.Models.SINUEntities().vParam_Grados.ToList(), "GRADO", "DESCRIPCION", Model.Grado), htmlAttributes: new { @class = "form-control" })
                @*@Html.EditorFor(model => model.Grado, new { htmlAttributes = new { @class = "form-control" } })*@
                @Html.ValidationMessageFor(model => model.Grado, "", new { @class = "text-danger" })
            </div>
        </div>


        @*<div class="form-group">
            @Html.LabelFor(model => model.Grado, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Grado, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.mr, "", new { @class = "text-danger" })
            </div>
        </div>*@



        <div class="form-group">
            @Html.LabelFor(model => model.Destino, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Destino, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Destino, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comentario, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.Comentario, new { htmlAttributes = new { @class = "form-control" } })
                @* @Html.ValidationMessageFor(model => model.Comentario, "", new { @class = "text-danger" })*@
            </div>
        </div>

        @*<div class="form-group">
            @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.ConfirmPassword, new { @class = "col-md-2 control-label" })
            <div class="col-md-10">
                @Html.PasswordFor(m => m.ConfirmPassword, new { @class = "form-control" })
            </div>
        </div>*@


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="GRABAR" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Volver a la lista", "Index")
</div>
@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">


            PerfilUsu();

            function PerfilUsu() {
                var text = $("#inaoact").val().trim(' ');
                if (text == "Delegacion") {
                    $("#SI").show();
                } else {
                    $("#SI").hide();
                }
            };

            $("#inaoact").on('changed.bs.select', function (e, clickedIndex, isSelected, previousValue) {
                PerfilUsu();
            });

   
    </script>
}

