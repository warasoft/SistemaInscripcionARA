    @model SINU.Models.Convocatoria

@{
    ViewBag.Title = "Nueva Convocatoria";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.lst = new List<SINU.Models.PeriodosInscripciones>();
}


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    @*<div class="form-horizontal">*@
    @*<h4>Convocatoria</h4>*@
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model=>model.Fecha_Inicio_Proceso)    
    <table>
        <thead>
            <tr>
                <th>
                    <label>Perído de Inscripcion</label>
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Html.DropDownList("IdPeriodoInscripcion", null, "Seleccionar Período", htmlAttributes: new { @class = "form-control", @id = "ComboInscripcion" })
                    @Html.ValidationMessageFor(model => model.IdPeriodoInscripcion, "", new { @class = "text-danger" })
                </td>
                <td>
                    <input type="button" value="Nuevo Período" onclick="location.href='@Url.Action("Create", "PeriodoInscripciones")'" class="btn btn-default" />
                </td>
            </tr>
        </tbody>
    </table>
    <table>
        <thead>
            <tr>
                <th><label>Fechas de Inicio y Fin</label></th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Html.ListBoxFor(model => model.PeriodosInscripciones, new SelectList(ViewBag.lst, "Value", "Text"), new { @class = "form-control", @id = "FechasIniFin" })
                </td>
            </tr>
        </tbody>
    </table>
    <table>
        <thead>
            <tr>

                <th>
                    @*@Html.LabelFor(model => model.IdModalidad, "IdModalidad", htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label class="control-label col-md-2">Modalidad</label>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @*@Html.DropDownListFor(model => model.Personal, new SelectList(lst.ToList(), "Value", "Text", Model.Personal), "Seleccione Personal", new { @class = "form-control", @id = "ddlRegions" })*@
                    @*@Html.DropDownList("IdModalidad", null, htmlAttributes: new { @class = "form-control", @id = "Modalidades" })*@
                    @Html.DropDownList("IdModalidad", null, "Seleccione Modalidad", htmlAttributes: new { @class = "form-control", @id = "Modalidades" })
                    @Html.ValidationMessageFor(model => model.IdModalidad, "", new { @class = "text-danger" })
                </td>
                <td><input type="button" value="Nueva Modalidad" onclick="location.href='@Url.Action("Create", "Modalidads")'" class="btn btn-default" />
            </tr>
        </tbody>
    </table>

    <table>
        <thead>
            <tr>
                <th>
                    @*@Html.LabelFor(model => model.IdGrupoCarrOficio, "IdGrupoCarrOficio", htmlAttributes: new { @class = "control-label col-md-2" })*@
                    <label class="control-label col-md-2">Carreras/Oficios</label>
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>

                @*<td>@Html.ActionLink("Nueva Modalidad ", "Create", "Modalidads")</td>*@
                <td>
                    @Html.DropDownList("IdGrupoCarrOficio", null, "Seleccione Grupo", htmlAttributes: new { @class = "form-control", @id = "GruposyCarreras" }) @*, @disabled = "disable" })*@
                    @Html.ValidationMessageFor(model => model.IdGrupoCarrOficio, "", new { @class = "text-danger" })
                </td>
                <td>
                    <input type="button" value="Nuevo Grupo" onclick="location.href='@Url.Action("Create", "GrupoCarrOficios")' " class="btn btn-default" />
                </td>
            </tr>
        </tbody>
    </table>
    <p></p>
    @*esto lo comente para usar periodoconvocatoria
        <table>
        <thead>
            <tr>
                <th>
                    @Html.LabelFor(m => m.ff, htmlAttributes: new { @class = "label col-md-12" })
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Html.EditorFor(m => m.ff, new { htmlAttributes = new { @class = "form-control datepicker", @id = "FechaFin",@Type="Text", placeholder = "DD/MM/YYYY", @readOnly = true, title = "Fecha de finalización del proceso de esta convocatoria" } })
                    @Html.ValidationMessageFor(model => model.ff, "", new { @class = "text-danger" })
                </td>
            </tr>
        </tbody>
    </table>*@
    <p></p>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Guardar" class="btn btn-default" />
        </div>
    </div>

}

<div>
    @Html.ActionLink("Volver", "Index")
</div>
<script src="~/Scripts/jquery-3.3.1.js"></script>
<script src="~/Scripts/jquery.validate.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.js"></script>
<!-- ***********************************************************************-->
<!-- COPIAR TODO ESTE SCRIPT DE DATATABLE PARA TODAS LAS TABLAS DEL SISTEMA-->
<!-- ***********************************************************************-->
<!--Para establecer Formato de Tabla-->
<!-- Establecer la tabla  <table class="table table-filters" id="le-filters">-->
<!-- Agregar en las columnas que no deseo ordenar  <th class="no-sort"> -->
<!-- Agregar en las columnas que no deseo ordenar ni buscar  <th class="ni-o-ni-bu"> -->
<!-- Rodear la tr de las th con <thead> </thead>-->
<!-- Rodear el contenido de la tabla con <tbody>-->
@section Scripts {
    <script type="text/javascript">
        //scrip que permite buscar por cualquier campo en la tabla para su uso requiere que tabla tenga la propiedad id=myTable
        $(document).ready(function () {
            $(".table-filters").DataTable({
                responsive: true,
                "language":
                {
                    "sProcessing": "Procesando...",
                    "sLengthMenu": "Mostrar _MENU_ registros",
                    "sZeroRecords": "No se encontraron resultados",
                    "sEmptyTable": "Ningún dato disponible en esta tabla",
                    "sInfo": "Mostrando registros del _START_ al _END_ de un total de _TOTAL_ registros",
                    "sInfoEmpty": "Mostrando registros del 0 al 0 de un total de 0 registros",
                    "sInfoFiltered": "(filtrado de un total de _MAX_ registros)",
                    "sInfoPostFix": "",
                    "sSearch": "Buscar:",
                    "sUrl": "",
                    "sInfoThousands": ",",
                    "sLoadingRecords": "Cargando...",
                    "oPaginate": {
                        "sFirst": "Primero",
                        "sLast": "Último",
                        "sNext": "Siguiente",
                        "sPrevious": "Anterior"
                    },
                    "oAria": {
                        "sSortAscending": ": Activar para ordenar la columna de manera ascendente",
                        "sSortDescending": ": Activar para ordenar la columna de manera descendente"
                    }
                },

                "columnDefs": [{
                    "targets": 'no-sort',
                    "orderable": false
                },
                {
                    "targets": 'ni-o-ni-bu',
                    "searchable": false,
                    "orderable": false

                }]

            });
        });

        $(document).ready(function () {
            //ddlRegions es igual al ID del listado de Personal.
            $("#ComboInscripcion").change(function () {
                //$("#FechasIniFin").show();
                //alert($("#ddlRegions").val());
                // /grupoCarreraOficio /Home/GetTerritoriesList      RegionId es igual a la variable que le paso al controaldor

                $.get("/Convocatorias/DevolverFechas", { RegionId: $("#ComboInscripcion").val() }, function (data) {
                    // VACIAMOS EL DropDownList aca hay que poner
                    //ddlterritories es ID de la lista carreras
                    //alert("textovaconcomilla");
                    $("#FechasIniFin").empty();

                    // AÑADIMOS UN NUEVO label CON EL NOMBRE DEL ELEMENTO SELECCIONADO
                    //$("#ddlTerritories").append("<option value> -- Seleccionar Carreras Para " + $("#ddlRegions option:selected").text() + " --</option>")

                    // CONSTRUIMOS EL DropDownList A PARTIR DEL RESULTADO Json (data)
                    $.each(data, function (index, row) {
                        alert(row.Text)
                        $("#FechasIniFin").append("<option value='" + row.Value + "'>" + row.Text + "</option>")
                    });
                });
            });
        });
        //carreras filtradas
        $(document).ready(function () {
            //ddlRegions es igual al ID del listado de Personal.
            $("#Modalidades").change(function () {
                // $("#GruposyCarreras").prop("disabled", true);
                //alert($("#Modalidades").val());
                // /grupoCarreraOficio /Home/GetTerritoriesList      RegionId es igual a la variable que le paso al controaldor

                $.get("/Convocatorias/DevolverCArrerasFiltradas", { ModalidadId: $("#Modalidades").val() }, function (data) {
                    // VACIAMOS EL DropDownList aca hay que poner
                    //ddlterritories es ID de la lista carreras
                    //alert("textovaconcomilla");
                    $("#GruposyCarreras").empty();

                    // AÑADIMOS UN NUEVO label CON EL NOMBRE DEL ELEMENTO SELECCIONADO
                    $("#GruposyCarreras").append("<option value>Seleccionar Grupo" + "</option>")

                    // CONSTRUIMOS EL DropDownList A PARTIR DEL RESULTADO Json (data)
                    $.each(data, function (index, row) {

                        $("#GruposyCarreras").prop("disabled", false);
                        $("#GruposyCarreras").append("<option value='" + row.Value + "'>" + row.Text + "</option>")
                    });
                });
            });
        });
        $('#FechaFin').datepicker({
            format: "dd/mm/yyyy",
          
            weekStart: 1,
            startDate: "today",
            todayBtn: "linked",
            clearBtn: true,
            language: "es",
            daysOfWeekDisabled: "0,6",
            daysOfWeekHighlighted: "1,2,3,4,5",
            todayHighlight: true
        });
    </script>
    @*<script type="text/javascript">
        //alterala validacion de la fechas
        //jQuery.validator.methods["date"] = function (value, element) { return true; };
        var date = new Date();
        date.setDate(date.getDate() +1);
        $('.datepicker').datepicker({
            dateFormat: 'yyyy/dd/mm',
            autoclose: true,
            startDate: date,
        });
    </script>*@
    <script>
        $(function () {
  $('[data-toggle="tooltip"]').tooltip()
})
    </script>

}



